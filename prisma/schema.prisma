// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       String     @id @unique @default(cuid())
  name     String
  phone    String[]   @unique
  email    String     @unique
  joined   DateTime
  personId String?   @unique
  Person   Person[]
  Role     Role[]
  Relation Relation[]
}

model Person {
  id          String     @id @unique @default(cuid())
  name        String
  phone       String[]  
  email       String[]   
  description String?
  relationsD Relation[] @relation(name: "RelationsD") // relations direct
  relationsI Relation[] @relation(name: "RelationsI") // relations indirect
  createdBy   User?      @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime   @default(now())
}

model Role{
  id       String   @id @unique @default(cuid())
  name     String   
  Relation  Relation[] @relation(name:"Roles")
  createdBy User    @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Relation {
  id        String  @id @unique @default(cuid())
  role      Role?    @relation(name: "Roles", fields: [roleId], references: [id])
  roleId    String?
  isPerson  Person? @relation(name: "RelationsD", fields: [isPersonId], references: [id])
  isPersonId String?
  ofPerson  Person? @relation(name:"RelationsI", fields: [ofPersonId], references: [id])
  ofPersonId String?
  createdBy User    @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}
